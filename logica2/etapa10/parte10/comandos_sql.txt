1. Comandos DML (Data Manipulation Language)

SELECT: Recupera dados de uma tabela.
Exemplo: SELECT * FROM tabela;
INSERT: Insere novos registros em uma tabela.
Exemplo: INSERT INTO tabela (coluna1, coluna2) VALUES (valor1, valor2);
UPDATE: Atualiza dados existentes em uma tabela.
Exemplo: UPDATE tabela SET coluna1 = valor1 WHERE condição;
DELETE: Remove registros de uma tabela.
Exemplo: DELETE FROM tabela WHERE condição;

2. Comandos DDL (Data Definition Language)
CREATE: Cria tabelas, bancos de dados ou outros objetos.
Exemplo: CREATE TABLE tabela (coluna1 tipo, coluna2 tipo);
ALTER: Modifica a estrutura de uma tabela.
Exemplo: ALTER TABLE tabela ADD coluna tipo;
DROP: Remove tabelas ou bancos de dados.
Exemplo: DROP TABLE tabela;

3. Comandos DCL (Data Control Language)
GRANT: Concede permissões a usuários.
Exemplo: GRANT SELECT ON tabela TO usuario;
REVOKE: Revoga permissões de usuários.
Exemplo: REVOKE SELECT ON tabela FROM usuario;

4. Comandos TCL (Transaction Control Language)
COMMIT: Salva as alterações realizadas.
Exemplo: COMMIT;
ROLLBACK: Reverte alterações não salvas.
Exemplo: ROLLBACK;
SAVEPOINT: Define um ponto de salvamento em uma transação.
Exemplo: SAVEPOINT ponto1;
------------------------------------------------------

Quando utilizada com funções de agregação, como SUM, COUNT, AVG, MAX e MIN, o GROUP BY é obrigatorio.

Explicação COMANDO SQL 1:
    SELECT clientes.nome, SUM(filmes.preco_aluguel) AS total_cliente FROM alugueis 
    JOIN clientes ON alugueis.id_cliente = clientes.id_cliente
    JOIN filmes ON alugueis.id_filme = alugueis.id_filme
    GROUP BY clientes.nome
    ORDER BY total_cliente

1. 
Explicação COMANDO SQL 2:
    SELECT clientes.nome, filmes.titulo FROM alugueis 
    JOIN clientes ON alugueis.id_cliente = clientes.id_cliente
    JOIN filmes ON alugueis.id_filme = filmes.id_filme

Explicação COMANDO SQL 3:
    SELECT filmes.titulo FROM alugueis 
    JOIN filmes ON alugueis.id_filme = filmes.id_filme
    WHERE devolvido = 0

Explicação COMANDO SQL 4:

    SELECT clientes.nome
    FROM alugueis a 
    JOIN clientes ON a.id_cliente = clientes.id_cliente
    GROUP BY clientes.nome
    HAVING COUNT(a.id_filme) > 3
    ORDER BY clientes.nome


--------------------------------------------------------
Observações de Python

função só precisa de commit() se houver INSERT, UPDATE ou DELETE.
cur.fetchall() -> recupera as linhas e retorna como uma lista de tuplas. cada tupla representa uma linha da tabela
-----------------------------------------------

COUNT(tabela.campo) - Conta quantas linhas existem para determinado campo
Restrições: 
1. nao pode usar COUNT sem GROUP BY com outras colunas 
2. Conta apenas valores nao nulos 
3. para contar até os nulos seria COUNT(*)

FROM — define de onde vêm os dados.

JOIN — junta tabelas para ter todas as colunas que você precisa.

WHERE — filtra antes de agrupar.

GROUP BY — cria grupos de linhas (ex.: agrupa todas as linhas do mesmo cliente, para que o COUNT conte apenas os alugueis daquele cliente, não de todo mundo).
Se você agrupa por c.nome, cada cliente aparece apenas uma vez no resultado, e as funções agregadas (COUNT, SUM, AVG etc.) mostram valores referentes àquele grupo.

COUNT, SUM, AVG` etc. — são funções de agregação que operam dentro de cada grupo.

HAVING — filtra depois de contar/somar etc.

ORDER BY — ordena o resultado final.

LIMIT — limita o número de linhas no final.

ON - Ele garante que as linhas das tabelas se combinem somente quando a foreign/primary key for igual nas duas tabelas.
