âœ… Desafio Integrador â€“ Paradigmas de ProgramaÃ§Ã£o (Etapa 4)
Objetivo: Simular um sistema de gestÃ£o de tarefas em uma empresa, combinando os conceitos de ProgramaÃ§Ã£o Orientada a Objetos, Estruturada, Funcional e Modular.

ğŸ§  DescriÃ§Ã£o do sistema
VocÃª vai desenvolver um sistema simples que:

Cadastra funcionÃ¡rios, com nome, idade e cargo.

Permite ao funcionÃ¡rio criar tarefas, cada uma com tÃ­tulo, descriÃ§Ã£o, prioridade e status (pendente ou concluÃ­da).

Permite listar tarefas por status, ou por funcionÃ¡rio.

Mostra estatÃ­sticas funcionais usando funÃ§Ãµes puras e filter, map e reduce:

Total de tarefas

Quantas estÃ£o concluÃ­das

Quantas sÃ£o de alta prioridade

Usa estruturas organizadas e modulares: pelo menos 2 arquivos separados (ex: main.py e tarefas.py ou modelo.py).

Usa heranÃ§a para criar a classe Funcionario, herdando da classe Pessoa.

ğŸ“„ Checklist tÃ©cnico obrigatÃ³rio
 Classe Pessoa com atributos e mÃ©todo falar()

 Classe Funcionario(Pessoa) com mÃ©todo bater_ponto()

 Classe Tarefa com atributos definidos acima

 MÃ©todos para adicionar tarefa e listar tarefas

 Filtro funcional para mostrar tarefas pendentes/concluÃ­das

 Uso de filter, map e reduce para gerar estatÃ­sticas

 ModularizaÃ§Ã£o com pelo menos dois arquivos

 ProteÃ§Ã£o com if __name__ == "__main__" no main.py

 ComentÃ¡rios explicativos no cÃ³digo

 Boas prÃ¡ticas de indentaÃ§Ã£o e nomes significativos

ğŸ§ª Entrada / Output esperados
Entradas (simulaÃ§Ã£o via input() ou valores fixos para teste):

Dados de funcionÃ¡rios e tarefas

Outputs:

Mensagens claras de cadastro, status e estatÃ­sticas como:

FuncionÃ¡rio Joana cadastrou a tarefa: "Revisar relatÃ³rio"
Total de tarefas: 5 | ConcluÃ­das: 3 | Alta prioridade: 2
ğŸ›  Ferramentas obrigatÃ³rias
Classes (__init__, mÃ©todos e heranÃ§a)

filter, map, reduce (from functools import reduce)

DicionÃ¡rios ou listas para armazenar tarefas

ModularizaÃ§Ã£o com import

ğŸ’¡ Dicas para se destacar
Use title() para formatar nomes.

Valide se o funcionÃ¡rio existe antes de atribuir tarefa.

Use mÃ©todos como .append(), .get() e controle de status com strings padronizadas ("pendente", "concluÃ­da").

Pode usar input() ou prÃ©-preencher dados se quiser agilizar testes.

Use cores e emojis se quiser deixar a saÃ­da mais amigÃ¡vel (opcional).